#!/usr/bin/env node

/**
 * Module dependencies.
 */

let fs = require('fs')
var app = require('../app');
var debug = require('debug')('server1:server');
var http = require('http');
let https = require('https')

/**
 * Https certificates.
 */

let privateKey = fs.readFileSync('/etc/letsencrypt/live/i-ptr.com/privkey.pem', 'utf8')
let certificate = fs.readFileSync('/etc/letsencrypt/live/i-ptr.com/fullchain.pem', 'utf8')

let credentials = {
    key: privateKey,
    cert: certificate
}

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '80');
//app.set('port', port);

/*
function isSecure(req) {
    if (req.headers['x-forwarded-proto'] === 'https')
    return true

    return false
} */
/*
// app.enable('trust proxy')
app.use(( req, res, next) => {
    isSecure(req) ? next() : res.redirect(301, 'https://' + req.hostname + req.url)
})*/
app.set('port', port)

/**
 * Create HTTP and HTTPS servers.
 */

var server = http.createServer(app);
let httpsServer = https.createServer(credentials, app)

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
httpsServer.listen(443)
server.on('error', onError);
httpsServer.on('error', onError)
server.on('listening', onListening);
httpsServer.on('listening', onListening)

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = httpsServer.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
